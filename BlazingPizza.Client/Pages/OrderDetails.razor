@page "/myorders/{orderId:int}"
@using System.Security.Cryptography
@using System.Threading
@implements IDisposable

@inject HttpClient HttpClient

    <div class="main">
        @if (invalidOrder)
        {
            <h2>Nope</h2>
            <p>Sorry, this order could not be loaded.</p>
        }
        else if (orderWithStatus == null)
        {
            <text>Loading...</text>
        }
        else
        {
            <div class="track-order">
                <div class="track-order-title">
                    <h2>
                        Order placed @orderWithStatus.Order.CreatedTime.ToLongDateString()
                    </h2>
                    <p class="ml-auto mb-0">
                        Status: <strong>@orderWithStatus.StatusText</strong>
                    </p>
                </div>
                <div class="track-order-body">
                    <div class="track-order-details">
                        <OrderRewiew Order="@orderWithStatus.Order"/>
                    </div>
                </div>
            </div>
        }
    </div>

@code {
    [Parameter]
    public int OrderId { get; set; }

    OrderWithStatus orderWithStatus;
    bool invalidOrder;
    CancellationTokenSource poolingCancellationToken;

    protected override void OnParametersSet()
    {
        poolingCancellationToken?.Cancel();

        PoolForUpdates();
    }

    private async void PoolForUpdates()
    {
        poolingCancellationToken = new CancellationTokenSource();

        while (!poolingCancellationToken.IsCancellationRequested)
        {
            try
            {
                invalidOrder = false;
                orderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>($"orders/{OrderId}");
                StateHasChanged();

                if (orderWithStatus.IsDelivered)
                {
                    poolingCancellationToken.Cancel();
                }
                else
                {
                    await Task.Delay(4000);
                }
            }
            catch (Exception e)
            {
                invalidOrder = true;
                poolingCancellationToken.Cancel();
                Console.Error.WriteLine(e);
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        poolingCancellationToken?.Cancel();
    }

}
